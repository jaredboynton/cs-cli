#!/bin/bash

# Customer Transcripts CLI - Combined Setup and Runtime Script
# Handles both initial setup and CLI execution in one script

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
BOLD='\033[1m'
NC='\033[0m' # No Color

# Function to print colored output
print_header() {
    echo -e "\n${BOLD}${BLUE}=== $1 ===${NC}"
}

print_status() {
    echo -e "${BLUE}[setup]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[setup]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[setup]${NC} $1"
}

print_error() {
    echo -e "${RED}[setup]${NC} $1"
}

# Get the directory where this script is located
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
cd "$SCRIPT_DIR"

# Check if setup is needed (first run detection)
NEEDS_SETUP=false

# Check if uv.lock exists and dependencies are installed
if [ ! -f "uv.lock" ] || ! command -v uv &> /dev/null; then
    NEEDS_SETUP=true
fi

# If we need setup, run the setup process
if [ "$NEEDS_SETUP" = true ]; then
    print_header "Customer Transcripts CLI Setup"
    echo "This will install everything needed to extract Gong customer calls."
    echo "Press Enter to continue or Ctrl+C to cancel..."
    read -r

    # Check if we're on macOS
    if [[ "$OSTYPE" != "darwin"* ]]; then
        print_error "This setup script is designed for macOS only."
        exit 1
    fi

    print_header "Checking Dependencies"

    # Check and install Homebrew if needed
    if ! command -v brew &> /dev/null; then
        print_warning "Homebrew not found. Installing Homebrew..."
        echo "You may be prompted for your password to install Homebrew."
        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
        
        # Add Homebrew to PATH for this session
        if [[ -f "/opt/homebrew/bin/brew" ]]; then
            # Apple Silicon Mac
            eval "$(/opt/homebrew/bin/brew shellenv)"
        elif [[ -f "/usr/local/bin/brew" ]]; then
            # Intel Mac
            eval "$(/usr/local/bin/brew shellenv)"
        fi
        
        print_success "Homebrew installed successfully!"
    else
        print_success "Homebrew is already installed."
    fi

    # Check and install Git if needed
    if ! command -v git &> /dev/null; then
        print_warning "Git not found. Installing Git via Homebrew..."
        brew install git
        print_success "Git installed successfully!"
    else
        print_success "Git is already installed."
    fi

    # Check and install uv if needed
    if ! command -v uv &> /dev/null; then
        print_warning "uv not found. Installing uv via Homebrew..."
        brew install uv
        print_success "uv installed successfully!"
    else
        print_success "uv is already installed."
    fi

    print_header "Setting Up Customer Transcripts CLI"

    # Install Python 3.12 if needed (uv handles this automatically)
    print_status "Ensuring Python 3.12 is available..."
    uv python install 3.12 >/dev/null 2>&1 || true
    print_success "Python 3.12 is ready!"

    # Initialize uv project and install dependencies
    print_status "Initializing uv environment and installing dependencies..."
    print_status "Note: This may take a moment if Python 3.12 needs to be downloaded..."
    if [ ! -f "uv.lock" ]; then
        # First time setup - create lock file
        uv sync
    else
        # Already initialized - just sync dependencies
        uv sync
    fi
    print_success "Package and dependencies installed successfully!"

    print_header "Setup Complete!"
    print_success "Customer Transcripts CLI is ready to use with uv!"
    echo ""
    echo -e "${BOLD}To run the tool:${NC}"
    echo -e "  ${BLUE}./cli --customer \"Company Name\" --days 30${NC}"
    echo -e "  ${BLUE}./cli --folder-id \"123456789\" --days 7${NC}"
    echo ""
    echo -e "${BOLD}Alternative (direct uv command):${NC}"
    echo -e "  ${BLUE}uv run python -m team_calls.cli --customer \"Company Name\" --days 30${NC}"
    echo ""
    echo -e "${BOLD}Examples:${NC}"
    echo -e "  Extract 7-11 calls from last 30 days:"
    echo -e "    ${GREEN}./cli --customer \"7-11\" --days 30${NC}"
    echo ""
    echo -e "  Extract calls from specific date range:"
    echo -e "    ${GREEN}./cli --customer \"Postman\" --from-date 2024-01-01 --to-date 2024-01-31${NC}"
    echo ""
    echo -e "${BOLD}Need help?${NC} Run: ${BLUE}./cli --help${NC}"
    echo ""
    
    # If no arguments were provided, exit after setup
    if [ $# -eq 0 ]; then
        echo "Setup complete! Run this script again with arguments to use the CLI."
        exit 0
    fi
fi

# Runtime checks and CLI execution
# Ensure dependencies are synced (quietly during normal operation)
if [ "$NEEDS_SETUP" = false ]; then
    uv sync --quiet >/dev/null 2>&1 || {
        echo "Warning: Failed to sync dependencies" >&2
    }
fi

# Install the local package in development mode if needed
if ! uv run python -c "import team_calls" >/dev/null 2>&1; then
    uv pip install -e . --quiet >/dev/null 2>&1 || {
        echo "Warning: Failed to install local package" >&2
    }
fi

# Execute the CLI
exec uv run python -m team_calls.cli "$@"
