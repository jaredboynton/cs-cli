#!/bin/bash

# Customer Transcripts CLI - One-Click Setup for macOS
# Installs everything needed including Homebrew and Python if missing

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
BOLD='\033[1m'
NC='\033[0m' # No Color

# Function to print colored output
print_header() {
    echo -e "\n${BOLD}${BLUE}=== $1 ===${NC}"
}

print_status() {
    echo -e "${BLUE}[setup]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[setup]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[setup]${NC} $1"
}

print_error() {
    echo -e "${RED}[setup]${NC} $1"
}

print_header "Customer Transcripts CLI Setup"
echo "This will install everything needed to extract Gong customer calls."
echo "Press Enter to continue or Ctrl+C to cancel..."
read -r

# Get the directory where this script is located
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
cd "$SCRIPT_DIR"

# Check if we're on macOS
if [[ "$OSTYPE" != "darwin"* ]]; then
    print_error "This setup script is designed for macOS only."
    exit 1
fi

print_header "Checking Dependencies"

# Check and install Homebrew if needed
if ! command -v brew &> /dev/null; then
    print_warning "Homebrew not found. Installing Homebrew..."
    echo "You may be prompted for your password to install Homebrew."
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
    
    # Add Homebrew to PATH for this session
    if [[ -f "/opt/homebrew/bin/brew" ]]; then
        # Apple Silicon Mac
        eval "$(/opt/homebrew/bin/brew shellenv)"
    elif [[ -f "/usr/local/bin/brew" ]]; then
        # Intel Mac
        eval "$(/usr/local/bin/brew shellenv)"
    fi
    
    print_success "Homebrew installed successfully!"
else
    print_success "Homebrew is already installed."
fi

# Check and install Git if needed
if ! command -v git &> /dev/null; then
    print_warning "Git not found. Installing Git via Homebrew..."
    brew install git
    print_success "Git installed successfully!"
else
    print_success "Git is already installed."
fi

# Check and install Python 3 if needed
if ! command -v python3 &> /dev/null; then
    print_warning "Python 3 not found. Installing Python 3 via Homebrew..."
    brew install python3
    print_success "Python 3 installed successfully!"
else
    print_success "Python 3 is already installed."
fi

print_header "Setting Up Customer Transcripts CLI"

# Create virtual environment if it doesn't exist
VENV_DIR="$SCRIPT_DIR/venv"
if [ ! -d "$VENV_DIR" ]; then
    print_status "Creating virtual environment..."
    python3 -m venv venv
    print_success "Virtual environment created."
else
    print_success "Virtual environment already exists."
fi

# Activate virtual environment
print_status "Activating virtual environment..."
source "$VENV_DIR/bin/activate"

# Upgrade pip to avoid issues
print_status "Upgrading pip..."
pip install --upgrade pip >/dev/null 2>&1

# Install the package
print_status "Installing customer-transcripts-cli package..."
pip install -e . >/dev/null 2>&1
print_success "Package installed successfully!"

print_header "Setup Complete!"
print_success "Customer Transcripts CLI is ready to use!"
echo ""
echo -e "${BOLD}To run the tool:${NC}"
echo -e "  ${BLUE}./cli --customer \"Company Name\" --days 30${NC}"
echo -e "  ${BLUE}./cli --folder-id \"123456789\" --days 7${NC}"
echo ""
echo -e "${BOLD}Examples:${NC}"
echo -e "  Extract 7-11 calls from last 30 days:"
echo -e "    ${GREEN}./cli --customer \"7-11\" --days 30${NC}"
echo ""
echo -e "  Extract calls from specific date range:"
echo -e "    ${GREEN}./cli --customer \"Postman\" --from-date 2024-01-01 --to-date 2024-01-31${NC}"
echo ""
echo -e "${BOLD}Need help?${NC} Run: ${BLUE}./cli --help${NC}"
echo ""